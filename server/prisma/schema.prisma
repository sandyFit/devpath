generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model agent_action_types {
  action_type   String          @id(map: "AgentActionType_pkey")
  description   String
  agent_actions agent_actions[]
}

model agent_actions {
  action_id          Int                @id(map: "AgentAction_pkey") @default(autoincrement())
  user_id            Int
  project_id         Int
  path_id            Int
  action_type        String
  agent_name         String?
  action_details     String?
  outcome            ActionOutcome?
  confidence_score   Decimal?
  triggered_by       TriggeredBy?
  created_at         DateTime           @default(now())
  agent_action_types agent_action_types @relation(fields: [action_type], references: [action_type], map: "AgentAction_action_type_fkey")
  learning_paths     learning_paths     @relation(fields: [path_id], references: [path_id], map: "AgentAction_path_id_fkey")
  projects           projects           @relation(fields: [project_id], references: [project_id], map: "AgentAction_project_id_fkey")
  users              users              @relation(fields: [user_id], references: [user_id], map: "AgentAction_user_id_fkey")
}

model analyses {
  analysis_id              Int        @id(map: "Analysis_pkey") @default(autoincrement())
  project_id               Int
  file_id                  Int
  analysis_type            AnalysisType
  analysis_result          String?
  issues_found             String?
  issues_count             Int?
  suggestions              String?
  quality_score            Int?
  security_score           Int?
  complexity_score         Int?
  best_practices_score     Int?
  learning_gaps            String?
  strengths                String?
  learning_recommendations String?
  skill_level_assessments  String?
  improvement_priority     String?
  recommended_resources    String?
  analysis_model           String?
  processing_time_ms       Decimal?
  created_at               DateTime   @default(now())
  updated_at               DateTime
  code_files               code_files @relation(fields: [file_id], references: [file_id], map: "Analysis_file_id_fkey")
  projects                 projects   @relation(fields: [project_id], references: [project_id], map: "Analysis_project_id_fkey")
}

model code_files {
  file_id          Int        @id(map: "CodeFile_pkey") @default(autoincrement())
  project_id       Int
  file_name        String     @unique(map: "CodeFile_file_name_key")
  programming_lang String
  content          String?
  file_size        Decimal?
  file_path        String?
  created_at       DateTime   @default(now())
  updated_at       DateTime
  analyses         analyses[]
  projects         projects   @relation(fields: [project_id], references: [project_id], map: "CodeFile_project_id_fkey")
}

model learning_paths {
  path_id             Int             @id(map: "LearningPath_pkey") @default(autoincrement())
  user_id             Int
  project_id          Int
  recommended_topics  String?
  difficulty_level    Int?
  estimated_hours     Int?
  progress_percentage Int?
  learning_status     LearningStatus?
  learning_objectives String?
  prerequisites       String?
  resources           String?
  created_at          DateTime        @default(now())
  updated_at          DateTime
  agent_actions       agent_actions[]
  projects            projects        @relation(fields: [project_id], references: [project_id], map: "LearningPath_project_id_fkey")
  users               users           @relation(fields: [user_id], references: [user_id], map: "LearningPath_user_id_fkey")
  user_progress       user_progress[]
}

model project_statistics {
  stats_id                Int      @id @default(autoincrement())
  project_id              Int
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  average_quality_score   Float?
  average_complexity_score Float?
  average_security_score   Float?
  language_distribution   Json?

  total_files             Int?     
  total_tests             Int?     
  total_issues            Int?     

  total_lines_of_code     Int?
  total_functions         Int?
  total_classes           Int?

  projects                projects @relation(fields: [project_id], references: [project_id])
}


model project_statuses {
  status_code String     @id(map: "ProjectStatus_pkey")
  description String
  projects    projects[]
}

model projects {
  project_id         Int                  @id(map: "Project_pkey") @default(autoincrement())
  user_id            Int
  status_code        String
  project_name       String
  total_files        Int?
  created_at         DateTime             @default(now())
  updated_at         DateTime
  uploaded_at        DateTime
  agent_actions      agent_actions[]
  analyses           analyses[]
  code_files         code_files[]
  learning_paths     learning_paths[]
  project_statistics project_statistics[]
  project_statuses   project_statuses     @relation(fields: [status_code], references: [status_code], map: "Project_status_code_fkey")
  users              users                @relation(fields: [user_id], references: [user_id], map: "Project_user_id_fkey")
}

model user_progress {
  progress_id        Int            @id(map: "UserProgress_pkey") @default(autoincrement())
  user_id            Int
  path_id            Int
  topic_completed    String?
  completion_date    DateTime
  skill_level        SkillLevel?
  streak_days        Int?
  time_spent_minutes Decimal?
  achievement_earned String?
  notes              String?
  created_at         DateTime       @default(now())
  updated_at         DateTime
  learning_paths     learning_paths @relation(fields: [path_id], references: [path_id], map: "UserProgress_path_id_fkey")
  users              users          @relation(fields: [user_id], references: [user_id], map: "UserProgress_user_id_fkey")
}

model users {
  user_id        Int              @id(map: "User_pkey") @default(autoincrement())
  username       String           @unique(map: "User_username_key")
  email          String           @unique(map: "User_email_key")
  password_hash  String
  user_status    UserStatus
  created_at     DateTime         @default(now())
  updated_at     DateTime
  agent_actions  agent_actions[]
  learning_paths learning_paths[]
  projects       projects[]
  user_progress  user_progress[]
}

enum UserStatus {
  active
  inactive
  paused
}

enum LearningStatus {
  not_started
  in_progress
  paused
  reviewing
  completed
  cancelled
}

enum SkillLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AnalysisType {
  CODE_QUALITY
  SECURITY
  COMPLEXITY
  BEST_PRACTICES
  PERFORMANCE
}


enum ActionOutcome {
  success
  failed
  ignored
  pending
}

enum TriggeredBy {
  system
  user
  schedule
  api
}

