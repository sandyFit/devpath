generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model analyses {
  analysis_id              Int           @id @default(autoincrement())
  project_id               Int
  file_id                  Int
  analysis_type            AnalysisType
  analysis_result          String?
  issues_found             String?
  issues_count             Int?          @default(0)
  suggestions              String?
  quality_score            Float?        // Changed from Int to Float
  security_score           Float?        // Changed from Int to Float
  complexity_score         Float?        // Changed from Int to Float
  best_practices_score     Float?        // Changed from Int to Float
  learning_gaps            String?
  strengths                String?
  learning_recommendations String?
  skill_level_assessments  String?
  improvement_priority     String?
  recommended_resources    String?
  analysis_model           String?
  processing_time_ms       Int?          // Changed from Decimal to Int
  analysis_status          AnalysisStatus? @default(pending)
  analyzer_version         String?
  confidence_level         Float?
  error_message            String?
  created_at               DateTime      @default(now())
  updated_at               DateTime      @updatedAt
  code_files               code_files    @relation(fields: [file_id], references: [file_id], onDelete: Cascade)
  projects                 projects      @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  
  @@index([project_id])
  @@index([file_id])
  @@index([analysis_type])
  @@index([project_id, analysis_type])
}

enum AnalysisStatus {
  pending
  running
  completed
  failed
}

model analysis_events {
  event_id    Int       @id @default(autoincrement())
  project_id  Int
  event_type  EventType 
  details     String?   
  created_at  DateTime  @default(now())
  
  projects    projects  @relation(fields: [project_id], references: [project_id])
  
  @@index([project_id])
}

enum EventType {
  analysis_started
  file_analyzed
  project_completed
  analysis_failed
}

model code_files {
  file_id          Int        @id @default(autoincrement())
  project_id       Int
  file_name        String     
  programming_lang String
  content          String?
  file_size        BigInt?    
  file_path        String?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  analyses         analyses[]
  projects         projects   @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
  
  @@unique([project_id, file_name])  
  @@index([project_id])
  @@index([programming_lang])
}

model learning_paths {
  path_id             Int             @id(map: "LearningPath_pkey") @default(autoincrement())
  user_id             Int
  project_id          Int
  recommended_topics  String?
  difficulty_level    Int?
  estimated_hours     Int?
  progress_percentage Int?
  learning_status     LearningStatus?
  learning_objectives String?
  prerequisites       String?
  resources           String?
  created_at          DateTime        @default(now())
  updated_at          DateTime
  projects            projects        @relation(fields: [project_id], references: [project_id], map: "LearningPath_project_id_fkey")
  users               users           @relation(fields: [user_id], references: [user_id], map: "LearningPath_user_id_fkey")
  user_progress       user_progress[]
}

model project_statistics {
  stats_id                Int      @id @default(autoincrement())
  project_id              Int
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt

  average_quality_score    Float?
  average_complexity_score Float?
  average_security_score   Float?
  language_distribution    Json?
  cyclomatic_complexity    Float?

  total_files             Int? 
  total_dirs              Int?   
  total_tests             Int?     
  total_issues            Int?     

  total_lines_of_code     Int?
  total_functions         Int?
  total_classes           Int?

  projects                projects @relation(fields: [project_id], references: [project_id])
}

model project_stack_items {
  stack_item_id Int           @id @default(autoincrement())
  project_id    Int
  name          String        
  type          stack_type    

  projects      projects      @relation(fields: [project_id], references: [project_id], onDelete: Cascade)
}

enum stack_type {
  language
  framework
  tool
}

model project_statuses {
  status_code String     @id(map: "ProjectStatus_pkey")
  description String
  projects    projects[]
}

model projects {
  project_id         Int                  @id(map: "Project_pkey") @default(autoincrement())
  user_id            Int
  status_code        String
  project_name       String
  created_at         DateTime             @default(now())
  updated_at         DateTime
  uploaded_at        DateTime
  analyses           analyses[]
  code_files         code_files[]
  learning_paths     learning_paths[]
  project_statistics project_statistics[]
  stack_items        project_stack_items[]
  analysis_events    analysis_events[]
  project_statuses   project_statuses     @relation(fields: [status_code], references: [status_code], map: "Project_status_code_fkey")
  users              users                @relation(fields: [user_id], references: [user_id], map: "Project_user_id_fkey")
}


model user_progress {
  progress_id        Int            @id(map: "UserProgress_pkey") @default(autoincrement())
  user_id            Int
  path_id            Int
  topic_completed    String?
  completion_date    DateTime
  skill_level        SkillLevel?
  streak_days        Int?
  time_spent_minutes Decimal?
  achievement_earned String?
  notes              String?
  created_at         DateTime       @default(now())
  updated_at         DateTime
  learning_paths     learning_paths @relation(fields: [path_id], references: [path_id], map: "UserProgress_path_id_fkey")
  users              users          @relation(fields: [user_id], references: [user_id], map: "UserProgress_user_id_fkey")
}

model users {
  user_id        Int              @id(map: "User_pkey") @default(autoincrement())
  username       String           @unique(map: "User_username_key")
  email          String           @unique(map: "User_email_key")
  password_hash  String
  user_status    UserStatus
  created_at     DateTime         @default(now())
  updated_at     DateTime
  learning_paths learning_paths[]
  projects       projects[]
  user_progress  user_progress[]
}

enum UserStatus {
  active
  inactive
  paused
}

enum LearningStatus {
  not_started
  in_progress
  paused
  reviewing
  completed
  cancelled
}

enum SkillLevel {
  beginner
  intermediate
  advanced
  expert
}

enum AnalysisType {
  CODE_QUALITY
  SECURITY
  COMPLEXITY
  BEST_PRACTICES
  PERFORMANCE
}


